{"version":3,"sources":["Component/HCharts.js","apiConst.js","App.js","serviceWorker.js","index.js"],"names":["HCharts","url","editFunc","keyArr","title","useState","options","setOption","useEffect","axios","get","then","response","editedData","data","map","text","xAxis","labels","formatter","this","value","name","yAxis","series","type","colorByPoint","showInLegend","catch","error","console","log","highcharts","Highcharts","apikey","topTracks","topArtists","App","handleDataForTopTracks","el","y","Number","listeners","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mSAKe,SAASA,EAAT,GAAoD,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAAS,EACpCC,qBADoC,mBAC1DC,EAD0D,KACjDC,EADiD,KAyCjE,OAtCAC,qBAAU,WACTC,IACEC,IAAIT,GACJU,MAAK,SAAUC,GACf,IACMC,EADeD,EAASE,KAAKX,EAAO,IAAIA,EAAO,IACrBY,IAAIb,GAEpCK,EAAU,CACTH,MAAO,CACNY,KAAMZ,GAEPa,MAAO,CACNC,OAAQ,CACPC,UAAW,WACV,OAAON,EAAWO,KAAKC,OAAOC,QAIjCC,MAAO,CACNnB,MAAO,CACNY,KAAM,UAGRQ,OAAQ,CACP,CACCC,KAAM,SACNC,cAAc,EACdZ,KAAMD,EACNc,cAAc,SAKjBC,OAAM,SAAUC,GAChBC,QAAQC,IAAIF,QAEZ,IAGF,6BACC,kBAAC,IAAD,CAAiBG,WAAYC,IAAY3B,QAASA,KChDrD,IAAM4B,EAAS,mCAETC,EAAS,2FAAuFD,EAAvF,wBADD,aAERE,EAAU,4FAAwFF,EAAxF,wBAFF,a,MC6BCG,MAzBf,WACC,SAASC,EAAuBC,GAC/B,MAAO,CACNjB,KAAMiB,EAAGjB,KACTkB,EAAGC,OAAOF,EAAGG,YAGf,OACC,yBAAKC,UAAU,OACd,kBAAC3C,EAAD,CACCC,IAAKmC,EACLlC,SAAUoC,EACVnC,OAAQ,CAAC,aAAc,UACvBC,MAAM,gBAEP,kBAACJ,EAAD,CACCC,IAAKkC,EACLjC,SAAUoC,EACVnC,OAAQ,CAAC,SAAU,SACnBC,MAAM,iBCZUwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8B,c","file":"static/js/main.1223513a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nexport default function HCharts({ url, editFunc, keyArr, title }) {\n\tconst [options, setOption] = useState();\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(url)\n\t\t\t.then(function (response) {\n\t\t\t\tconst responseData = response.data[keyArr[0]][keyArr[1]];\n\t\t\t\tconst editedData = responseData.map(editFunc);\n\n\t\t\t\tsetOption({\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: title,\n\t\t\t\t\t},\n\t\t\t\t\txAxis: {\n\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\t\treturn editedData[this.value].name;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tyAxis: {\n\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\ttext: \"Count\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tseries: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"column\",\n\t\t\t\t\t\t\tcolorByPoint: true,\n\t\t\t\t\t\t\tdata: editedData,\n\t\t\t\t\t\t\tshowInLegend: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<HighchartsReact highcharts={Highcharts} options={options} />\n\t\t</div>\n\t);\n}\n","const apikey = \"97cee60fe2193b383cd8377301901a80\";\nconst limit = \"&limit=10\";\nconst topTracks = `https://ws.audioscrobbler.com/2.0/?method=geo.gettoptracks&country=spain&api_key=${apikey}&format=json&${limit}`;\nconst topArtists = `https://ws.audioscrobbler.com/2.0/?method=geo.gettopartists&country=spain&api_key=${apikey}&format=json&${limit}`;\n\nexport { topTracks, topArtists };\n","import React from \"react\";\nimport HCharts from \"./Component/HCharts\";\nimport { topTracks, topArtists } from \"./apiConst\";\nimport \"./App.css\";\n\nfunction App() {\n\tfunction handleDataForTopTracks(el) {\n\t\treturn {\n\t\t\tname: el.name,\n\t\t\ty: Number(el.listeners),\n\t\t};\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<HCharts\n\t\t\t\turl={topArtists}\n\t\t\t\teditFunc={handleDataForTopTracks}\n\t\t\t\tkeyArr={[\"topartists\", \"artist\"]}\n\t\t\t\ttitle=\"Top Artists\"\n\t\t\t></HCharts>\n\t\t\t<HCharts\n\t\t\t\turl={topTracks}\n\t\t\t\teditFunc={handleDataForTopTracks}\n\t\t\t\tkeyArr={[\"tracks\", \"track\"]}\n\t\t\t\ttitle=\"Top Tracks\"\n\t\t\t></HCharts>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}